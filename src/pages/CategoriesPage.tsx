import { useState } from "react";
import { Plus, Edit2, Trash2, RefreshCw, X } from "react-feather";
import { useDispatch, useSelector } from "react-redux";
import type { RootState } from "../store/store";
import type {
  Category,
  SubCategory,
} from "../store/features/categoriesSlice";

import {
  addCategory,
  updateCategory,
  deleteCategory,
  addSubCategory,
  updateSubCategory,
  deleteSubCategory,
} from "../store/features/categoriesSlice";
import { supabase } from "../lib/supabaseClient";

export const CategoriesPage = () => {
  const dispatch = useDispatch();
  const categoriesSlice = useSelector((state: RootState) => state.categories);
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);

  const [showAddCategoryForm, setShowAddCategoryForm] = useState(false);
  const [showAddSubCategoryForm, setShowAddSubCategoryForm] = useState(false);
  const [selectedCategoryForSub, setSelectedCategoryForSub] = useState<
    string | null
  >(null);
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(
    new Set()
  );

  // For add/edit Category form
  const [categoryName, setCategoryName] = useState("");
  const [categoryType, setCategoryType] = useState("income");
  const [editingCategoryId, setEditingCategoryId] = useState<string | null>(
    null
  );

  // For add/edit Sub-category form
  const [subCategoryName, setSubCategoryName] = useState("");
  const [editingSubCategoryId, setEditingSubCategoryId] = useState<
    string | null
  >(null);

  // Toggle expanded/collapsed categories
  const toggleCategory = (categoryId: string) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(categoryId)) {
      newExpanded.delete(categoryId);
    } else {
      newExpanded.add(categoryId);
    }
    setExpandedCategories(newExpanded);
  };

  // Category type colors for badges
  const getTypeColor = (type: string) => {
    switch (type) {
      case "income":
        return darkMode
          ? "text-green-400 bg-green-400/10"
          : "text-green-700 bg-green-100";
      case "expense":
        return darkMode
          ? "text-red-400 bg-red-400/10"
          : "text-red-700 bg-red-100";
      case "investment":
        return darkMode
          ? "text-blue-400 bg-blue-400/10"
          : "text-blue-700 bg-blue-100";
      case "transfer":
        return darkMode
          ? "text-purple-400 bg-purple-400/10"
          : "text-purple-700 bg-purple-100";
      default:
        return darkMode
          ? "text-gray-400 bg-gray-400/10"
          : "text-gray-700 bg-gray-100";
    }
  };

  // Filter subcategories by category ID
  const getCategorySubCategories = (categoryId: string) => {
    return categoriesSlice.subCategories.filter(
      (sub) => sub.category_id === categoryId
    );
  };

  // --- Category Handlers ---

  const openAddCategoryForm = () => {
    setEditingCategoryId(null);
    setCategoryName("");
    setCategoryType("income");
    setShowAddCategoryForm(true);
  };

  const openEditCategoryForm = (category: Category) => {
    setEditingCategoryId(category.id);
    setCategoryName(category.name);
    setCategoryType(category.type);
    setShowAddCategoryForm(true);
  };

  // Inside your add category submit handler:
  const handleCategorySubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!categoryName.trim()) return;

    if (editingCategoryId) {
      // update logic here (similar with Supabase update + dispatch)
      await supabase
        .from("categories")
        .update({ name: categoryName.trim(), type: categoryType })
        .eq("id", editingCategoryId);

      dispatch(
        updateCategory({
          id: editingCategoryId,
          name: categoryName.trim(),
          type: categoryType,
        })
      );
    } else {
      // Insert new category in Supabase
      const { data, error } = await supabase
        .from("categories")
        .insert([{ name: categoryName.trim(), type: categoryType }])
        .select()
        .single();

      if (error) {
        alert("Failed to add category: " + error.message);
        return;
      }

      if (data) {
        dispatch(addCategory(data)); // data includes id generated by Supabase
      }
    }
    setShowAddCategoryForm(false);
  };

  const handleDeleteCategory = (categoryId: string) => {
    if (
      window.confirm(
        "Are you sure you want to delete this category? All its sub-categories will be deleted too."
      )
    ) {
      dispatch(deleteCategory(categoryId));
    }
  };

  // --- Sub-category Handlers ---

  const openAddSubCategoryForm = (categoryId: string) => {
    setSelectedCategoryForSub(categoryId);
    setEditingSubCategoryId(null);
    setSubCategoryName("");
    setShowAddSubCategoryForm(true);
  };

  const openEditSubCategoryForm = (subCategory: SubCategory) => {
    setSelectedCategoryForSub(subCategory.category_id);
    setEditingSubCategoryId(subCategory.id);
    setSubCategoryName(subCategory.name);
    setShowAddSubCategoryForm(true);
  };

  const handleSubCategorySubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!subCategoryName.trim() || !selectedCategoryForSub) return;

    if (editingSubCategoryId) {
      await supabase
        .from("sub_categories")
        .update({
          name: subCategoryName.trim(),
          category_id: selectedCategoryForSub,
        })
        .eq("id", editingSubCategoryId);

      dispatch(
        updateSubCategory({
          id: editingSubCategoryId,
          name: subCategoryName.trim(),
          category_id: selectedCategoryForSub,
        })
      );
    } else {
      const { data, error } = await supabase
        .from("sub_categories")
        .insert([
          { name: subCategoryName.trim(), category_id: selectedCategoryForSub },
        ])
        .select()
        .single();

      if (error) {
        alert("Failed to add sub-category: " + error.message);
        return;
      }

      if (data) {
        dispatch(addSubCategory(data));
      }
    }
    setShowAddSubCategoryForm(false);
  };

  const handleDeleteSubCategory = (subCategoryId: string) => {
    if (window.confirm("Are you sure you want to delete this sub-category?")) {
      dispatch(deleteSubCategory(subCategoryId));
    }
  };

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h2
          className={`text-3xl font-bold ${
            darkMode ? "text-white" : "text-gray-900"
          }`}
        >
          Categories
        </h2>
        <button
          onClick={openAddCategoryForm}
          className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-colors ${
            darkMode
              ? "bg-blue-600 hover:bg-blue-700 text-white"
              : "bg-blue-600 hover:bg-blue-700 text-white"
          }`}
        >
          <Plus className="h-4 w-4" />
          <span>Add Category</span>
        </button>
      </div>

      <div className="space-y-4">
        {categoriesSlice.categories.map((category: Category) => {
          const subCats = getCategorySubCategories(category.id);
          const isExpanded = expandedCategories.has(category.id);

          return (
            <div
              key={category.id}
              className={`border rounded-lg ${
                darkMode
                  ? "bg-gray-800 border-gray-700"
                  : "bg-white border-gray-200"
              }`}
            >
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => toggleCategory(category.id)}
                      className={`p-1 rounded ${
                        darkMode ? "hover:bg-gray-700" : "hover:bg-gray-100"
                      }`}
                    >
                      <RefreshCw
                        className={`h-4 w-4 transition-transform ${
                          isExpanded ? "rotate-90" : ""
                        } ${darkMode ? "text-gray-400" : "text-gray-600"}`}
                      />
                    </button>
                    <h3
                      className={`font-semibold ${
                        darkMode ? "text-white" : "text-gray-900"
                      }`}
                    >
                      {category.name}
                    </h3>
                    <span
                      className={`px-2 py-1 text-xs rounded-full ${getTypeColor(
                        category.type
                      )}`}
                    >
                      {category.type}
                    </span>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => openEditCategoryForm(category)}
                      className={`p-1 rounded ${
                        darkMode
                          ? "text-blue-400 hover:bg-gray-700"
                          : "text-blue-600 hover:bg-gray-100"
                      }`}
                    >
                      <Edit2 className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteCategory(category.id)}
                      className={`p-1 rounded ${
                        darkMode
                          ? "text-red-400 hover:bg-gray-700"
                          : "text-red-600 hover:bg-gray-100"
                      }`}
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>

                {isExpanded && (
                  <div className="mt-3 space-y-2 pl-8 border-l border-gray-300 dark:border-gray-600">
                    {subCats.length === 0 && (
                      <p
                        className={darkMode ? "text-gray-400" : "text-gray-600"}
                      >
                        No sub-categories
                      </p>
                    )}
                    {subCats.map((sub) => (
                      <div
                        key={sub.id}
                        className={`flex items-center justify-between p-2 rounded ${
                          darkMode ? "hover:bg-gray-700" : "hover:bg-gray-100"
                        }`}
                      >
                        <span
                          className={darkMode ? "text-white" : "text-gray-900"}
                        >
                          {sub.name}
                        </span>
                        <div className="flex space-x-2">
                          <button
                            onClick={() => openEditSubCategoryForm(sub)}
                            className={`p-1 rounded ${
                              darkMode
                                ? "text-blue-400 hover:bg-gray-700"
                                : "text-blue-600 hover:bg-gray-100"
                            }`}
                          >
                            <Edit2 className="h-4 w-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteSubCategory(sub.id)}
                            className={`p-1 rounded ${
                              darkMode
                                ? "text-red-400 hover:bg-gray-700"
                                : "text-red-600 hover:bg-gray-100"
                            }`}
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    ))}

                    <button
                      onClick={() => openAddSubCategoryForm(category.id)}
                      className={`flex items-center space-x-2 px-3 py-1 rounded mt-2 text-sm font-medium ${
                        darkMode
                          ? "text-blue-400 hover:bg-gray-700"
                          : "text-blue-600 hover:bg-gray-100"
                      }`}
                    >
                      <Plus className="h-4 w-4" />
                      <span>Add Sub-category</span>
                    </button>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Add/Edit Category Modal */}
      {showAddCategoryForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div
            className={`${
              darkMode ? "bg-gray-800" : "bg-white"
            } rounded-lg p-6 w-full max-w-md`}
          >
            <div className="flex justify-between items-center mb-4">
              <h3
                className={`text-lg font-semibold ${
                  darkMode ? "text-white" : "text-gray-900"
                }`}
              >
                {editingCategoryId ? "Edit Category" : "Add Category"}
              </h3>
              <button
                onClick={() => setShowAddCategoryForm(false)}
                className={`p-1 rounded ${
                  darkMode
                    ? "text-gray-400 hover:text-white"
                    : "text-gray-600 hover:text-black"
                }`}
              >
                <X />
              </button>
            </div>
            <form onSubmit={handleCategorySubmit}>
              <input
                type="text"
                placeholder="Category name"
                value={categoryName}
                onChange={(e) => setCategoryName(e.target.value)}
                className={`w-full px-3 py-2 mb-4 border rounded-md ${
                  darkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                required
              />
              <select
                className={`w-full px-3 py-2 mb-4 border rounded-md ${
                  darkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                value={categoryType}
                onChange={(e) => setCategoryType(e.target.value)}
                required
              >
                <option value="">Select Type</option>
                <option value="income">Income</option>
                <option value="expense">Expense</option>
                <option value="investment">Investment</option>
                <option value="transfer">Transfer</option>
              </select>
              <div className="flex space-x-3">
                <button
                  type="button"
                  onClick={() => setShowAddCategoryForm(false)}
                  className={`flex-1 px-4 py-2 border rounded-md transition-colors ${
                    darkMode
                      ? "border-gray-600 text-gray-300 hover:bg-gray-700"
                      : "border-gray-300 text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  {editingCategoryId ? "Save Changes" : "Add Category"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add/Edit Sub-category Modal */}
      {showAddSubCategoryForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div
            className={`${
              darkMode ? "bg-gray-800" : "bg-white"
            } rounded-lg p-6 w-full max-w-md`}
          >
            <div className="flex justify-between items-center mb-4">
              <h3
                className={`text-lg font-semibold ${
                  darkMode ? "text-white" : "text-gray-900"
                }`}
              >
                {editingSubCategoryId
                  ? "Edit Sub-category"
                  : "Add Sub-category"}
              </h3>
              <button
                onClick={() => setShowAddSubCategoryForm(false)}
                className={`p-1 rounded ${
                  darkMode
                    ? "text-gray-400 hover:text-white"
                    : "text-gray-600 hover:text-black"
                }`}
              >
                <X />
              </button>
            </div>
            <form onSubmit={handleSubCategorySubmit}>
              <input
                type="text"
                placeholder="Sub-category name"
                value={subCategoryName}
                onChange={(e) => setSubCategoryName(e.target.value)}
                className={`w-full px-3 py-2 mb-4 border rounded-md ${
                  darkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                required
              />
              <div className="flex space-x-3">
                <button
                  type="button"
                  onClick={() => setShowAddSubCategoryForm(false)}
                  className={`flex-1 px-4 py-2 border rounded-md transition-colors ${
                    darkMode
                      ? "border-gray-600 text-gray-300 hover:bg-gray-700"
                      : "border-gray-300 text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  {editingSubCategoryId ? "Save Changes" : "Add Sub-category"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};
